include("variables.jl")
include("propagator.jl")
include("Qlaw.jl")
include("functions.jl")
i=1
real_time = 0
Initialize(x_mee, x_coe, initial, controls)

while t[i] < t[N]
    global real_time
    global i
    r_sun, real_time = SunPositionUpdate(real_time)
    angles = qlaw_angles(x_coe[i,:], target, weights)
    thermal_model(heat, Temp, x_coe[i,:], angles, r_sun, controls, i)
    update_control(x_coe[i,:], controls, angles, Temp, r_sun, EclipseC, i)
    Rk4(x_mee, t, controls, dynamics, i, J2_per, Drag_per)  # LIV ho aggiunto Drag_per
    if (abs(x_coe[i,1]-target[1])/(target[1]))<0.0005 && (abs(x_coe[i,2]-target[2])/target[2])<0.005 && (abs(x_coe[i,3]-target[3])/target[3])<0.00005
        break
    end
    i += 1
end
x_updt, t_updt, u_updt = updt_size(t,x_coe,controls,i)
plotting(t_updt,x_updt,u_updt)
Thermal_Plot(t_updt,Temp[1:i,:].-273.15)
println("Final SMA: ",x_coe[i,1], " Km")
println("Final ECC: ",x_coe[i,2])
println("Final INCC: ",rad2deg(x_coe[i,3]), " Deg")
println("Final Time: ",t_updt[i]/86400," Days")
#println("Heat generated by thruster: ",ThrusterHeat()," W")
plot(t_updt[300:1000],Temp[300:1000,8].-273.15)
plot(t_updt[300:1000],Temp[300:1000,7].-273.15)
println(Temp[argmax(Temp[1:i,8]),8]-273.15)